use K_LEAGUE;

-- 단일행 서브쿼리
select player_name 선수명, position 포지션, back_no 백넘버
from player
where team_id = (select team_id from player where player_name = '정남일')
order by player_name;

SELECT B.TEAM_NAME, A.PLAYER_NAME, A.POSITION, A.BACK_NO, A.HEIGHT
FROM PLAYER A, TEAM B
WHERE A.HEIGHT < (SELECT AVG(X.HEIGHT)
					FROM PLAYER X
					WHERE X.TEAM_ID =A.TEAM_ID
					GROUP BY X.TEAM_ID)
	AND B.TEAM_ID = A.TEAM_ID
ORDER BY A.PLAYER_NAME 

SELECT A.STADIUM_ID, A.STADIUM_NAME
FROM STADIUM A
WHERE EXISTS (SELECT *
				FROM SCHEDULE X
				WHERE X.STADIUM_ID = A.STADIUM_ID
	AND X.SCHE_DATE BETWEEN '20120501' AND '20120502')

SELECT A.PLAYER_NAME, A.HEIGHT,
	(SELECT AVG(X.HEIGHT)
	FROM PLAYER X
	WHERE X.TEAM_ID = A.TEAM_ID) 팀평균키
FROM PLAYER A

SELECT B.TEAM_NAME, A.PLAYER_NAME, A.BACK_NO
FROM (SELECT TEAM_ID, PLAYER_NAME, BACK_NO
FROM PLAYER
WHERE POSITION = 'MF') A, TEAM B
WHERE B.TEAM_ID = A.TEAM_ID
ORDER BY A.PLAYER_NAME

SELECT A.TEAM_ID, B.TEAM_NAME, AVG(A.HEIGHT) 평균키
FROM PLAYER A, TEAM B
WHERE B.TEAM_ID = A.TEAM_ID
GROUP BY A.TEAM_ID, B.TEAM_NAME
HAVING AVG(A.HEIGHT) < (SELECT AVG(X.HEIGHT)
FROM PLAYER X
WHERE X.TEAM_ID IN (SELECT TEAM_ID
FROM TEAM
WHERE TEAM_NAME = '삼성블루윙즈'))

-- 뷰 정의
CREATE VIEW V_PLAYER_TEAM AS
SELECT A.PLAYER_NAME, A.POSITION, A.BACK_NO,
B.TEAM_ID, B.TEAM_NAME
FROM PLAYER A, TEAM B
WHERE B.TEAM_ID = A.TEAM_ID-- 정의된 뷰로부터 뷰 정의 가능CREATE VIEW V_PLAYER_TEAM_FILTER AS
SELECT PLAYER_NAME, POSITION, BACK_NO, TEAM_NAME
FROM V_PLAYER_TEAM
WHERE POSITION IN ('GK', 'MF')

-- 집합 연산자
SELECT TEAM_ID, PLAYER_NAME, POSITION, BACK_NO, HEIGHT
FROM PLAYER
WHERE TEAM_ID = 'K02'
UNION
SELECT TEAM_ID, PLAYER_NAME, POSITION, BACK_NO, HEIGHT
FROM PLAYER
WHERE POSITION = 'GK'
-- 위에서 중복 포함한 결과 union all
SELECT TEAM_ID, PLAYER_NAME, POSITION, BACK_NO, HEIGHT
FROM PLAYER
WHERE TEAM_ID = 'K02'
UNION ALL
SELECT TEAM_ID, PLAYER_NAME, POSITION, BACK_NO, HEIGHT
FROM PLAYER
WHERE POSITION = 'GK'

SELECT 'P' 구분코드, POSITION, AVG(HEIGHT) 평균키
FROM PLAYER
GROUP BY POSITION
UNION ALL
SELECT 'T' 구분코드, TEAM_ID, AVG(HEIGHT) 평균키
FROM PLAYER
GROUP BY TEAM_ID
ORDER BY 1, 2 DESC

-- GROUP BY
SELECT B.DNAME, A.JOB, COUNT(*) EMP_CNT, SUM(A.SAL) SAL_SUM
FROM EMP A, DEPT B
WHERE B.DEPTNO = A.DEPTNO
GROUP BY B.DNAME, A.JOB
ORDER BY B.DNAME, A.JOB-- GROUP BY + ROLL UPSELECT B.DNAME, A.JOB, COUNT(*) EMP_CNT, SUM(A.SAL) SAL_SUM
FROM EMP A, DEPT B
WHERE B.DEPTNO = A.DEPTNO
GROUP BY ROLLUP (B.DNAME, A.JOB)
ORDER BY B.DNAME, A.JOB

SELECT B.DNAME, GROUPING (B.DNAME) DNAME_GRP,
A.JOB, GROUPING (A.JOB) JOB_GRP,
COUNT(*) EMP_CNT, SUM(A.SAL) SAL_SUM
FROM EMP A, DEPT B
WHERE B.DEPTNO = A.DEPTNO
GROUP BY ROLLUP (B.DNAME, A.JOB)SELECT CASE GROUPING (B.DNAME) WHEN 1
THEN 'All Departments' ELSE B.DNAME END DNAME,
CASE GROUPING (A.JOB) WHEN 1
THEN 'All Jobs' ELSE A.JOB END JOB,
COUNT(*) EMP_CNT, SUM(A.SAL) SAL_SUM
FROM EMP A, DEPT B
WHERE B.DEPTNO = A.DEPTNO
GROUP BY ROLLUP (B.DNAME, A.JOB)

SELECT CASE GROUPING (B.DNAME) WHEN 1
THEN 'All Departments' ELSE B.DNAME END DNAME,
CASE GROUPING (A.JOB) WHEN 1
THEN 'All Jobs' ELSE A.JOB END JOB,
COUNT(*) EMP_CNT, SUM(A.SAL) SAL_SUM
FROM EMP A, DEPT B
WHERE B.DEPTNO = A.DEPTNO
GROUP BY B.DNAME, ROLLUP(A.JOB)

-- CUBE
SELECT CASE GROUPING (B.DNAME) WHEN 1
THEN 'All Departments' ELSE B.DNAME END DNAME,
CASE GROUPING (A.JOB) WHEN 1
THEN 'All Jobs' ELSE A.JOB END JOB,
COUNT(*) EMP_CNT, SUM(A.SAL) SAL_SUM
FROM EMP A, DEPT B
WHERE B.DEPTNO = A.DEPTNO
GROUP BY CUBE (B.DNAME, A.JOB)
ORDER BY B.DNAME DESC, A.JOB DESC 

SELECT DNAME, 'All Jobs' JOB, COUNT(*) EMP_CNT, SUM(SAL) SAL_SUM
FROM EMP A, DEPT B
WHERE B.DEPTNO = A.DEPTNO
GROUP BY DNAME
UNION ALL
SELECT 'All Departments' DNAME, JOB, COUNT(*) EMP_CNT, SUM(SAL)
SAL_SUM
FROM EMP A, DEPT B
WHERE B.DEPTNO = A.DEPTNO
GROUP BY JOB

SELECT CASE GROUPING (B.DNAME) WHEN 1 THEN 'All Departments' ELSE
B.DNAME END DNAME,
CASE GROUPING (A.JOB) WHEN 1 THEN 'All Jobs' ELSE A.JOB END JOB,
COUNT(*) EMP_CNT, SUM(A.SAL) SAL_SUM
FROM EMP A, DEPT B
WHERE B.DEPTNO = A.DEPTNO
GROUP BY GROUPING SETS(B.DNAME, A.JOB)
ORDER BY A.JOB

-- RANK
SELECT JOB, ENAME, SAL,
RANK() OVER (ORDER BY SAL DESC) AS ALL_RK,
RANK() OVER (PARTITION BY JOB ORDER BY SAL DESC) AS JOB_RK
FROM EMP
ORDER BY SAL DESC

SELECT JOB, ENAME, SAL,
RANK() OVER (PARTITION BY JOB ORDER BY SAL DESC) AS JOB_RK
FROM EMP

SELECT JOB, ENAME, SAL,
RANK() OVER (ORDER BY SAL DESC) AS RK,
DENSE_RANK() OVER (ORDER BY SAL DESC) AS DR
FROM EMP
ORDER BY SAL DESC

SELECT JOB, ENAME, SAL,
RANK() OVER (ORDER BY SAL DESC) AS RK,
ROW_NUMBER() OVER (ORDER BY SAL DESC) AS RN
FROM EMP
ORDER BY SAL DESC

SELECT MGR, ENAME, SAL,
SUM(SAL) OVER (PARTITION BY MGR) SAL_SUM
FROM EMP

SELECT MGR, ENAME, SAL,
SUM(SAL) OVER (PARTITION BY MGR ORDER BY SAL
RANGE UNBOUNDED PRECEDING) SAL_SUM
FROM EMP
ORDER BY MGR

SELECT MGR, ENAME, SAL,
MAX(SAL) OVER (PARTITION BY MGR) MAX_SAL
FROM EMP

SELECT MGR, ENAME, SAL
FROM (SELECT MGR, ENAME, SAL,
MAX(SAL) OVER (PARTITION BY MGR) MAX_SAL
FROM EMP) A
WHERE SAL = MAX_SAL

SELECT MGR, ENAME, SAL
FROM (SELECT MGR, ENAME, SAL,
RANK() OVER (PARTITION BY MGR ORDER BY SAL DESC) SAL_RK
FROM EMP) A
WHERE SAL_RK = 1SELECT MGR, ENAME, HIREDATE, SAL,
MIN(SAL) OVER (PARTITION BY MGR ORDER BY HIREDATE) AS MIN_SAL
FROM EMP

SELECT MGR, ENAME, HIREDATE, SAL,
AVG(SAL) OVER (PARTITION BY MGR ORDER BY HIREDATE
ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING) AS AVG_SAL
FROM EMP

-- 그룹 내 행 순서 함수
SELECT DEPTNO, ENAME, SAL,
FIRST_VALUE (ENAME) OVER (PARTITION BY DEPTNO ORDER BY SAL DESC
ROWS UNBOUNDED PRECEDING) AS ENAME_FV
FROM EMP

SELECT DEPTNO, ENAME, SAL,
LAST_VALUE (ENAME) OVER (PARTITION BY DEPTNO ORDER BY SAL DESC
ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) AS
ENAME_LV
FROM EMP

SELECT ENAME, HIREDATE, SAL,
LAG(SAL) OVER (ORDER BY HIREDATE) AS LAG_SAL
FROM EMP
WHERE JOB = 'SALESMAN'

SELECT ENAME, HIREDATE, SAL,
LAG(SAL, 2, 0) OVER (ORDER BY HIREDATE) AS LAG_SAL
FROM EMP
WHERE JOB = 'SALESMAN'

SELECT ENAME, HIREDATE,
LEAD(HIREDATE, 1) OVER (ORDER BY HIREDATE) AS LD_HIRE
FROM EMP
WHERE JOB = 'SALESMAN'

-- 그룹 내 비율 함수
SELECT DEPTNO, ENAME, SAL,
PERCENT_RANK() OVER (PARTITION BY DEPTNO ORDER BY SAL DESC) PR
FROM EMP

SELECT DEPTNO, ENAME, SAL,
ROUND(CUME_DIST() OVER (PARTITION BY DEPTNO ORDER BY SAL DESC), 2)
AS CD
FROM EMP

SELECT ENAME, SAL,
NTILE(4) OVER (ORDER BY SAL DESC) NT
FROM EMP

-- TOP N
SELECT TOP(2) ENAME, SAL
FROM EMP
ORDER BY SAL DESC

SELECT TOP(2) WITH TIES ENAME, SAL
FROM EMP
ORDER BY SAL DESC

SELECT ENAME, SAL
FROM EMP
ORDER BY SAL, EMPNO OFFSET 5 ROWS

SELECT ENAME, SAL
FROM EMP
ORDER BY SAL DESC,
EMPNO OFFSET 0 ROWS FETCH NEXT 5 ROWS ONLY

-- 계층형 질의와 셀프 조인
SELECT B.EMPNO, B.ENAME, B.MGR
FROM EMP A, EMP B
WHERE A.ENAME = 'JONES' AND B.MGR = A.EMPNO

SELECT C.EMPNO, C.ENAME, C.MGR
FROM EMP A, EMP B, EMP C
WHERE A.ENAME = 'JONES' AND B.MGR = A.EMPNO
AND C.MGR = B.EMPNO

SELECT C.EMPNO, C.ENAME, C.MGR
FROM EMP A, EMP B, EMP C
WHERE A.ENAME = 'SMITH' AND B.EMPNO = A.MGR
AND C.EMPNO = B.MGR